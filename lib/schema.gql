"""
Types of things that can be observed or measured as part of `Observation`.
"""
type ObservableProperty {
  id: ID!

  """
  A name for something that can be observed (eg, temperature, weight, contamination...)
  """
  label: String!

  """
  A textual description or comment.
  """
  note: String
}

"""
Possible qualitative assessment of an `ObservableProperty`.
(eg. property "contamination" may have phenomenon like "high", "some", "none")
"""
type ObservablePhenomenon {
  id: ID!

  """
  What observable property does this assessment apply to?
  """
  choiceOf: ObservableProperty!

  """
  A name for this phenomenon (eg. high, ripe, organic). Unique to each ObservableProperty.
  """
  label: String!

  """
  A numerical representation of this phenomenon, to be used when automatic analysis is needed (like value calculation formulas). For example, a series of high/medium/low/none phenomenon could be assigned formula quantifiers of 100/50/10/0.
  """
  formulaQuantifier: Float

  """
  A textual description or comment.
  """
  note: String
}

"""
Can contain either a unit+measure or a qualitative assessment.
"""
union ObservableResult = Measure | ObservablePhenomenon

"""
Things that can be observed.
"""
union ObservableObject = EconomicResource | Agent

"""
Agent (usually a person) or machine/sensor that conducts observations.
"""
union Observer = Agent | EconomicResource | ResourceSpecification

"""
An observation event that records the measurement or assessement of an economic resource.
"""
type Observation {
  id: ID!

  """
  The agent who is providing the observation
  """
  provider: Agent!

  """
  The person (`Agent`) or machine/sensor (`EconomicResource` or `ResourceSpecification`) who actually conducted the observation
  """
  madeBySensor: Observer!

  """
  Thing that was observed (like `EconomicResource` or `Agent`)
  """
  hasFeatureOfInterest: ObservableObject!

  """
  The date/time at which the observation event.
  """
  resultTime: DateTime!

  """
  Type of measurement (eg, temperature, weight...).
  """
  observedProperty: ObservableProperty!

  """
  The result of the observation, which can be one of:
  - Unit and measurement of what was observed (in the case of quantitative measurements)
  - Name and other information (using `ObservablePhenomenon`) about what was observed (in the case of qualitative measurements)
  """
  hasResult: ObservableResult!

  """
  The place where an observation occured. Usually mappable.
  """
  atLocation: SpatialThing

  """
  Optionally defines the economic process during which this event occured
  """
  observedDuring: Process

  """
  Grouping around something to create a boundary or context, used for documenting, accounting, planning.
  """
  inScopeOf: [AccountingScope!]

  """
  A textual description or comment.
  """
  note: String
}

input ObservationInputParams {
  """
  (`Person` or `Organization`) The agent who is providing the observation
  """
  provider: ID

  """
  (`Person` or `EconomicResource` or `ResourceSpecification`) The person or machine/sensor who actually conducted the observation
  """
  madeBySensor: ID

  """
  (`EconomicResource` or `Agent`) Thing that was observed
  """
  hasFeatureOfInterest: ID!

  """
  (`ObservableProperty`) Type of measurement (eg, temperature, weight...).
  """
  observedProperty: ID!

  """
  The date/time at which the observation event.
  """
  resultTime: DateTime

  """
  (`SpatialThing`) The place where an observation occured.  Usually mappable.
  """
  atLocation: ID

  """
  (`Process`) Optionally defines the economic process during which this event occured
  """
  observedDuring: ID

  """
  Grouping around something to create a boundary or context, used for documenting, accounting, planning.
  """
  inScopeOf: [ID!]

  """
  A textual description or comment.
  """
  note: String
}

type Mutation {
  createObservation(
    observation: ObservationInputParams!

    """
    Name and other information (`ObservablePhenomenon`) about what was observed (only in the case of qualitative measurements)
    """
    resultPhenomenon: ID

    """
    Unit and measurement of what was observed (only in the case of quantitative measurements)
    """
    resultMeasure: IMeasure
  ): Observation
}
